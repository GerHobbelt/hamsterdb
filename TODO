 
I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------
This Branch Is About Integrating The hamsterdb2 Functionality!!!!!
-----------------------------------------------------------------------------
The big headline is:
As a user i want to run many Transactions in parallel with high performance.
I'm using multiple threads b/c my CPU has multiple cores, and expect hamsterdb
to scale with the number of cores.
==============================================================================

x c++-ify the page
    x page->is_header() instead of page_get_self()==0

x design redundancy
    x identify toolkit (TBB, boost?) - go for boost, but we can use both later
        x both have fast mutex implementations, esp on Win32
        x tbb seems to have better memory allocators, but uses native API
            more often (i.e. for TLS), and in these cases boost might be faster
        x boost is more likely already installed
    x design code; who locks what?
      x disable concurrency during compilation? -- no, not required

x enable approx matching for cursors (see Sevencat's email)

o implement basic concurrency
    x ./configure: add dependency to boost
    x abstract boost stuff using typedefs:
        x thread
        x mutex
        x scopedlock
        x condition
        x tls
    x from each public handle: need a way to lock the Env
        x Env
        x Db
        x Cursor
        x Txn
        x what else?
        x store key data in TLS
            x use boost tls
            x this needs a test
            x check for memory leaks

    o rewrite monster testsuite
        o every database will run in its own thread
        o if --num-threads > 1: only create additional hamsterdb threads;
            bdb will always run in 1 thread
        o engine: split create/open/close in 
            x create_env/create_db, 
            x open_env/open_db, 
            o close_env/close_db
        o create_env: only execute if thread-id == 1; all others wait till
            thread 1 completed, then run
        o open_env: only execute if thread-id == 1; all others wait till
            thread 1 completed, then run
        o close_env: only execute if thread-id == 1; only execute if all
            other threads are done closing their db
        o engine: has a counter which is increased by the database after
            every operation; will then compare the results of al threads.
            then reset the counter and signal all threads that they can
            continue
    o check with valgrind
    o check with helgrind
    o check with ThreadSanitizer

    o create a wrapper script for the tests 
        (based on http://search.cpan.org/~garu/App-Rad-1.04/)
        that calls and manages the files, gathers the metrics, generates
        tests, create graphs, builds and links the binaries etc
        o needs a config file which describes input/output paths etc
        o monster.pl run-suite 1
        o monster.pl run-test ../../testsuite/1/1.tst --options...
            o integrate valgrind/hellgrind
            o integrate ThreadSanitizer
            o integrate clang
        o monster.pl create-graphs
        o monster.pl create-test --options...

    o need a way to graphically display performance metrics
        o output in a text file
            version/configuration/test-id
            each test is run in multiple threads
                performance-metrics based on time(), not real duration
                memory-metrics
                disk size
                same for berkeleydb
        o skript that generates a static html page from this file, 
            w/ graphs over the different versions

    o need a "load-generator" which runs for a defined duration 
        - max number of keys, max bytes to insert
        - key distribution: random, ascending, descending, zipfian, ...
        - duplicates yes/no
        - ...
        - before execution: dump into a (temp.) file, and if the test fails:
            copy the file to a reserved directory
        - read from file (this is the same as we have now)

o improve valgrind tests of the unittests 
    o collect all valgrind suppressions
    o create a new target in the makefile which uses the suppressions
    o release.sh: use this target, check that there are no un-suppressed
        errors (or leaks)

o also remove locking from C# and Java APIs



o btree_read_record: calls db->get_extended_key, which should use an
    existing ByteArray to avoid memory allocations

o db_erase_txn: calls check_erase_conflict, which does a btree lookup.
    but the lookup then happens again when doing the final erase, or not?
    o also check for find, insert

o implementation of hamsterdb should move into a namespace; otherwise
    there are conflicts if users have a C++ class called Database or
    Environment etc

o clean up the "close" functions
    o ham_close - move all functionality to Database::close
    o ham_env_close - move all functionality to Environment::close
    o ~Database: call close(), then simplify all code
    o ~Environment: call close(), then simplify all code
    o Cursor::close: currently (nearly) empty; merge with ~Cursor and
        Database::close_cursor()

o python API - update and integrate
    o also add to win32 package

o mail an Tony B, Curt M., andere


o continue with c++-ification of db.h/db.cc

o c++-ify the backend
    o remove be_set_dirty, replace with be->_fun_flush()

o continue with c++-ification of the environment - need to split into
    local and remote (same as for Database class)

o need a function to get the txn of a conflict (same as in v2)
    ham_status_t ham_txn_get_conflicting_txn(ham_txn_t *txn, ham_txn_t **other);
        oder: txn-id zurÃ¼ckgeben?
    o also add to c++ API
    o add documentation (header file)
    o add documentation (wiki)

o recovery: re-create pending transactions (if required)
    o needs a function to enumerate them

. c++-ify the transaction

. android port (needs new java api) in /contrib directory (it's on a separate
    branch)

. new test case for cursors
    insert (1, a)
    insert (1, b) (duplicate of 1)
    move (last) (-> 1, b)
    insert (1, c)
    move (last) (-> 1, c)? is the dupecache updated correctly?

. look for someone who can write a PHP or Perl or Ruby wrapper

. implement support for partial keys

. test with tcmalloc; if it works then also use it in the master branch, but
    make sure that memory consumption does not increase significantly

. there are a couple of areas where a btree cursor is uncoupled, just to 
    retrieve the key and to couple the txn-key. that's not efficient
        db.c:__btree_cursor_points_to
        db.c:__compare_cursors
        txn_cursor.c:cursor_sync
        txn_cursor.c:cursor_overwrite
    o move to a separate function
    o try to optimize

. hash-table.h: the foreach/remove_if/visitor pattern is clumsy. use 
    functor or class w/ operator() instead
. changeset: use a generic hash table for fast lookup (but leave list in place
    for everything else)
. cache: use a generic hash table

. add tests to verify that the cursor is not modified if an operation fails!
    (in cursor.cpp:LongTxnCursorTest are some wrapper functions to move or
    insert the cursor; that's a good starting point)

. the whole c++ protocol should be c++-ified

. move the whole configuration (key sizes, parameters, page size, etc) into a 
    separate class which is instantiated by the env

. c++-ify the btree node representation; 
    o include duplicates as well! disentangle duplicates from blob-handling

. c++-ify the blob handling and split off the duplicates

. cleanup db.h/db.cc - move functions into Database or 
    DatabaseImplementationLocal namespace - but take care b/c these functions
    are also used by Cursor or other modules which don't necessarily have
    access to the Local stuff
    o db_get_key_count
    o db_alloc_page
    o db_fetch_page
    o db_insert_txn
    o db_erase_txn
    o db_find_txn
    o db_check_insert_conflicts
    o db_check_erase_conflicts
    o __increment_dupe_index

. c++-ify everything else

. device, page and os shold no longer return errors but throw exceptions

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE !!! XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

. new flag for transactions: HAM_TXN_WILL_COMMIT
    if this flag is set, then write all records directly to the blob, not
    to the log. the log will only contain the rid.
    o document this (and also the drawback - that an abort will lose the 
        blobs and they cannot be reused
    -> this affects all temporary ham_insert-transactions 
    (not sure if this should get high priority)

o hamsterdb.com
    x add twitter feed
    o API documentation: don't link to "modules" but to startup page, update
        with newest version
    o crupp.de: do a backup of the database
    . google +1 button
    . can we use something like Aller.font?

o update documentation
    x in header file
    o in the wiki
        o don't forget to list all functions that are currently disabled
            w/ txn's -> sorting dupes, approx. matching, ...
        o transactional behavior/conflicts of duplicate keys
    o in the wiki: start with internal documentation
        o transactions
        o architecture
        o btree
        o journal/log
        o cache
        o I/O
        o unittests
        o cursor(s)
        o monstertests - how to use them?

o fully (!) automize the whole release process for unix; the result (on
    success) are the following files:
    o tar-ball
    o the README
    o the documentation as a tar
    o the Changelog
    o the release notes (a template)
    o the output (xml) of the monster tests

. port to WinCE

o how can we extend the monster-tests to have reliable tests for transactions?

. if memory consumption in the txn-tree is too high: flush records to disk
    (not sure if this should get high priority)

o when recovering, give users the choice if active transactions should be
    aborted (default behavior) or re-created

o extkeys: don't use txn_id for the 'age', use lsn instead

o the DatabaseImplementation subclass is not neccessary; all subclasses
    can directly derive from Database. 

. allow use of transactions without a log/journal

. allow use of transactions for in-memory databases

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

o ham_get_count: could be atomically updated with every journal entry

o when flushing a changeset: sort by offset, use writev()

o add concurrency (on a high level)

o flush transactions in background

. have a flag to disable flushing of logfiles/journal files (or flush them 
    async.)

o continue as described in integrate-ham2.txt...

