 
I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------
<<<<<<< HEAD
This Branch Is About Integrating The hamsterdb2 Functionality!!!!!
=======

o mail from Jake - performance regressions with frequent txn-aborts
    x fixed in code
    o run lessfs power-off recovery tests
    o add to monster testsuite or to unittests
    o run monster tests

o cleanup this TODO file - need better requirements tracking

-----------------------------------------------------------------------------

o review DB_NEW_PAGE_DOES_THRASH_CACHE - the cache age is not really used,
    therefore this flag is most likely not required 

o review statistics - the "cost" management; is this really in use? where?
    -> leave it as is - Ger might need it again

------------------------------------------------------------

o what about a HAM_RMW flag for ham_insert - it will do a read/modify/write
    operation if the record already exists; but how can we propagate a callback
    for this? 
    o empty/small/tiny records
    o large records
    o in-memory records
    o unittests
    o documentation in header file
    o documentation in wiki

o release new .NET wrapper with fix from a.todorov (-> nabble)
    x move to github
    . add server functionality

. add automatic code coverage using gconv
    http://www.manpagez.com/man/1/gcov/
    http://gcc.gnu.org/onlinedocs/gcc/Gcov.html
    http://aleccolocco.blogspot.com/2009/08/sqlite-lesson-in-low-defect-software.html (section "Test Coverage with GCC")
    o track coverage results, publish online
    o gui tools: http://code.google.com/p/trucov/,
                 http://sourceforge.net/projects/ggcov/files/ 

. remove HAM_HINT_UBER_FAST_ACCESS, HAM_HINT_RANDOM_ACCESS, 
	HAM_HINT_SEQUENTIAL?

. unix daemon/windows service
    o new option to set the working directory
    o new option to set the username

. more server stuff
    o add acceptance tests

. more server stuff
    o how could we do authentication?
    . support https?

. disable local client?
    o need configure switch to disable the local client
        -> also clean up db.h, env.h...
    o add tests for --disable-remote and --disable-local to release.sh

. remove the garbage-list from the cache - it's not used

-----------------------------------------------------------------------------

o update the Python API 

x move to github

. add server functionality

>>>>>>> flash-bang-grenade
-----------------------------------------------------------------------------
The big headline is:
As a user i want to run many Transactions in parallel with high performance.
I'm using multiple threads b/c my CPU has multiple cores, and expect hamsterdb
to scale with the number of cores.
==============================================================================

x c++-ify the page
    x page->is_header() instead of page_get_self()==0

x design redundancy
    x identify toolkit (TBB, boost?) - go for boost, but we can use both later
        x both have fast mutex implementations, esp on Win32
        x tbb seems to have better memory allocators, but uses native API
            more often (i.e. for TLS), and in these cases boost might be faster
        x boost is more likely already installed
    x design code; who locks what?
      x disable concurrency during compilation? -- no, not required

o implement basic concurrency
    x ./configure: add dependency to boost
    x abstract boost stuff using typedefs:
        x thread
        x mutex
        x scopedlock
        x condition
        x tls
    x from each public handle: need a way to lock the Env
        x Env
        x Db
        x Cursor
        x Txn
        x what else?
        x store key data in TLS
            x use boost tls
            x this needs a test
            x check for memory leaks
    o check with valgrind
    o check with helgrind
    o check with ThreadSanitizer

o implementation of hamsterdb should move into a namespace; otherwise
    there are conflicts if users have a C++ class called Database or
    Environment etc

o implement a full test suite (including gathering of performance metrics etc)
    o refactor monster test and include multi-threading
        x single point for collecting metrics
        x also collect file sizes
        x --profile should be enabled by default; to disable: --quiet
        x collect performance information based on times(2), not duration
            http://www.delorie.com/gnu/docs/glibc/libc_430.html
            -- no, does not work! times are just too short
        x can run ham2 vs bdb or alone, default is ham2 vs bdb
            x single backend: skip fullcheck
        o needs new option --num-threads
        o threads run same test in parallel, in different database
        o threads run each line round-robin and synchronize in fullcheck
            o in ham_find: all threads of a database handler synchronize
            o in fullcheck: all threads of ALL database handlers synchronize

    o has a wrapper script (http://search.cpan.org/~garu/App-Rad-1.04/)
        that calls and manages the file, gathers the metrics, generates
        tests, create graphs, builds and links the binaries etc
        o needs a config file which describes input/output paths etc
        o monster.pl run-suite 1
        o monster.pl run-test ../../testsuite/1/1.tst --options...
            o integrate valgrind/hellgrind
            o integrate ThreadSanitizer
            o integrate clang
        o monster.pl create-graphs
        o monster.pl create-test --options...

    o need a way to graphically display performance metrics
        o output in a text file
            version/configuration/test-id
            each test is run in multiple threads
                performance-metrics based on time(), not real duration
                memory-metrics
                disk size
                same for berkeleydb
        o skript that generates a static html page from this file, 
            w/ graphs over the different versions

    o need a "load-generator" which runs for a defined duration 
        - max number of keys, max bytes to insert
        - key distribution: random, ascending, descending, zipfian, ...
        - duplicates yes/no
        - ...
        - before execution: dump into a (temp.) file, and if the test fails:
            copy the file to a reserved directory
        - read from file (this is the same as we have now)

o clean up the "close" functions
    o ham_close - move all functionality to Database::close
    o ham_env_close - move all functionality to Environment::close
    o ~Database: call close(), then simplify all code
    o ~Environment: call close(), then simplify all code
    o Cursor::close: currently (nearly) empty; merge with ~Cursor and
        Database::close_cursor()

o python API - update and integrate
    o also add to win32 package

o mail an Tony B, Curt M., andere


o continue with c++-ification of db.h/db.cc

o c++-ify the backend
    o remove be_set_dirty, replace with be->_fun_flush()

o continue with c++-ification of the environment - need to split into
    local and remote (same as for Database class)

o need a function to get the txn of a conflict (same as in v2)
    ham_status_t ham_txn_get_conflicting_txn(ham_txn_t *txn, ham_txn_t **other);
        oder: txn-id zurÃ¼ckgeben?
    o also add to c++ API
    o add documentation (header file)
    o add documentation (wiki)

o recovery: re-create pending transactions (if required)
    o needs a function to enumerate them

. c++-ify the transaction

. android port (needs new java api) in /contrib directory (it's on a separate
    branch)

. new test case for cursors
    insert (1, a)
    insert (1, b) (duplicate of 1)
    move (last) (-> 1, b)
    insert (1, c)
    move (last) (-> 1, c)? is the dupecache updated correctly?

. look for someone who can write a PHP or Perl or Ruby wrapper

. implement support for partial keys

. test with tcmalloc; if it works then also use it in the master branch, but
    make sure that memory consumption does not increase significantly

. there are a couple of areas where a btree cursor is uncoupled, just to 
    retrieve the key and to couple the txn-key. that's not efficient
        db.c:__btree_cursor_points_to
        db.c:__compare_cursors
        txn_cursor.c:cursor_sync
        txn_cursor.c:cursor_overwrite
    o move to a separate function
    o try to optimize

. hash-table.h: the foreach/remove_if/visitor pattern is clumsy. use 
    functor or class w/ operator() instead
. changeset: use a generic hash table for fast lookup (but leave list in place
    for everything else)
. cache: use a generic hash table

. add tests to verify that the cursor is not modified if an operation fails!
    (in cursor.cpp:LongTxnCursorTest are some wrapper functions to move or
    insert the cursor; that's a good starting point)

. the whole c++ protocol should be c++-ified

. move the whole configuration (key sizes, parameters, page size, etc) into a 
    separate class which is instantiated by the env

. c++-ify the btree node representation; 
    o include duplicates as well! disentangle duplicates from blob-handling

. c++-ify the blob handling and split off the duplicates

. cleanup db.h/db.cc - move functions into Database or 
    DatabaseImplementationLocal namespace - but take care b/c these functions
    are also used by Cursor or other modules which don't necessarily have
    access to the Local stuff
    o db_get_key_count
    o db_alloc_page
    o db_fetch_page
    o db_insert_txn
    o db_erase_txn
    o db_find_txn
    o db_check_insert_conflicts
    o db_check_erase_conflicts
    o __increment_dupe_index

<<<<<<< HEAD
. c++-ify everything else
=======
o update the java API 

x move to github

o add server functionality
>>>>>>> flash-bang-grenade

. device, page and os shold no longer return errors but throw exceptions

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE !!! XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

. new flag for transactions: HAM_TXN_WILL_COMMIT
    if this flag is set, then write all records directly to the blob, not
    to the log. the log will only contain the rid.
    o document this (and also the drawback - that an abort will lose the 
        blobs and they cannot be reused
    -> this affects all temporary ham_insert-transactions 
    (not sure if this should get high priority)

o hamsterdb.com
    x add twitter feed
    o API documentation: don't link to "modules" but to startup page, update
        with newest version
    o crupp.de: do a backup of the database
    . google +1 button
    . can we use something like Aller.font?

o update documentation
    x in header file
    o in the wiki
        o don't forget to list all functions that are currently disabled
            w/ txn's -> sorting dupes, approx. matching, ...
        o transactional behavior/conflicts of duplicate keys
    o in the wiki: start with internal documentation
        o transactions
        o architecture
        o btree
        o journal/log
        o cache
        o I/O
        o unittests
        o cursor(s)
        o monstertests - how to use them?

o fully (!) automize the whole release process for unix; the result (on
    success) are the following files:
    o tar-ball
    o the README
    o the documentation as a tar
    o the Changelog
    o the release notes (a template)
    o the output (xml) of the monster tests

<<<<<<< HEAD
. port to WinCE
=======
. webpage changes
    http://www.purenetworks.com/
    http://www.omegathemes.com/tf/smartages/#
    http://eucalyptus.com/
    http://www.pctools.com/de
    x the header page image is too large
    o frontpage: have multiple images (scrolling in background) with more
        text info? 
        http://malsup.com/jquery/cycle/basic.html
        http://www.sohtanaka.com/web-design/examples/image-slider/
        http://www.slidedeck.com/
    o sitemap: pulldown with jquery
    o download: need download gates to track in analytics as goals
    o rss feed
>>>>>>> flash-bang-grenade

o how can we extend the monster-tests to have reliable tests for transactions?

. if memory consumption in the txn-tree is too high: flush records to disk
    (not sure if this should get high priority)

o when recovering, give users the choice if active transactions should be
    aborted (default behavior) or re-created

o extkeys: don't use txn_id for the 'age', use lsn instead

o the DatabaseImplementation subclass is not neccessary; all subclasses
    can directly derive from Database. 

. allow use of transactions without a log/journal

. allow use of transactions for in-memory databases

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

o ham_get_count: could be atomically updated with every journal entry

o when flushing a changeset: sort by offset, use writev()

o add concurrency (on a high level)

o flush transactions in background

. have a flag to disable flushing of logfiles/journal files (or flush them 
    async.)

o continue as described in integrate-ham2.txt...

